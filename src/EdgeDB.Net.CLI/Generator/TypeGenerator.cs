using EdgeDB.CLI.Generator.Models;
using EdgeDB.CLI.Generator.Results;
using EdgeDB.CLI.Utils;
using System;

namespace EdgeDB.CLI.Generator
{
    internal class TypeGenerator
    {
        public static void GenerateType(string outputDir, string @namespace, ClassResult result)
        {
            ApplyOverrides(result);

            var writer = new CodeWriter();

            writer.AppendLine("// AUTOGENERATED: DO NOT MODIFY");
            writer.AppendLine($"// Generated on {DateTime.UtcNow:O}");
            writer.AppendLine();

            writer.AppendLine("using EdgeDB;");

            foreach(var ns in result.UsedNamespaces)
            {
                writer.AppendLine($"using {ns};");
            }

            writer.AppendLine();

            writer.AppendLine($"namespace {@namespace};");
            writer.AppendLine();

            writer.AppendLine("#nullable enable");

            writer.AppendLine("[EdgeDBType]");
            writer.Append("public partial ");

            if (result.IsAbstract)
                writer.Append("abstract ");

            writer.Append($"class {result.ClassName}");

            if (result.Extending is not null)
                writer.Append($" : {result.Extending}");

            writer.AppendLine();

            using(_ = writer.BeginScope())
            {
                foreach(var property in result.Properties)
                {
                    writer.AppendLine($"[EdgeDBProperty(\"{property.Key}\")]");
                    writer.AppendLine($"public {property.Value.ToCSharp()} {TextUtils.ToPascalCase(property.Key)} {{ get; set; }}");

                    if(result.Properties.Last().Key != property.Key)
                        writer.AppendLine();
                }
            }

            writer.AppendLine("#nullable restore");

            File.WriteAllText(Path.Combine(GetTypeOutputDir(outputDir), $"{result.ClassName}.g.cs"), writer.ToString());
        }


        private static void ApplyOverrides(ClassResult result)
        {
            // TODO
        }

        private static string GetTypeOutputDir(string rootOutputDir)
        {
            var path = Path.Combine(rootOutputDir, "Types");

            Directory.CreateDirectory(path);

            return path;
        }
    }
}

