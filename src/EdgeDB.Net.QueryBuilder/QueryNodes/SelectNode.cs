using EdgeDB.Interfaces.Queries;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace EdgeDB.QueryNodes
{
    /// <summary>
    ///     Represents a 'SELECT' node
    /// </summary>
    internal class SelectNode : QueryNode<SelectContext>
    {
        /// <inheritdoc/>
        public SelectNode(NodeBuilder builder) : base(builder) { }

        /// <summary>
        ///     Gets a shape for the given type.
        /// </summary>
        /// <param name="type">The type to get the shape for.</param>
        /// <param name="currentDepth">The current depth of the shape.</param>
        /// <returns>The shape of the given type.</returns>
        private string? GetShape(Type type, int currentDepth = 0)
        {
            // get the properties for the type
            var properties = EdgeDBPropertyMapInfo.Create(type);

            // map each property to its shape form
            var propertyNames = properties.Map.Select(x =>
            {
                // get the edgedb name equivalent
                var name = x.Key;

                // if its a link, build a nested shape if we're not past our max depth
                if (EdgeDBTypeUtils.IsLink(x.Value, out var isArray, out var innerType))
                {
                    var shapeType = isArray ? innerType! : x.Value.Type;
                    if (currentDepth < Context.SubShapeDepth)
                    {
                        var subShape = GetShape(shapeType, currentDepth + 1);
                        return subShape is not null ? $"{name}: {subShape}" : null;
                    }
                    return null;
                }
                else // return just the name
                    return name;
            }).Where(x => x is not null);

            // join our properties by commas and wrap it in braces

            if (!propertyNames.Any())
                return null;

            return $"{{ {string.Join(", ", propertyNames)} }}";
        }

        /// <summary>
        ///     Gets the default shape for the current contextual type.
        /// </summary>
        /// <returns>The default shape for the current contextual type.</returns>
        private string? GetDefaultShape()
            => GetShape(OperatingType);

        /// <summary>
        ///     Gets the shape based on the context of the current node.
        /// </summary>
        /// <returns></returns>
        /// <exception cref="NotSupportedException"></exception>
        private string? GetShape()
        {
            // if no user-defined shape was passed in, generate the default shape
            if(Context.Shape == null)
            {
                return GetDefaultShape();
            }

            // generate the shape based on the contexts' expression.
            return $"{{ {ExpressionTranslator.Translate(Context.Shape, Builder.QueryVariables, Context, Builder.QueryGlobals)} }}";
        }

        /// <summary>
        ///     Wraps the parent node and removes it from the query builder.
        /// </summary>
        private void WrapParent(QueryNode parent)
        {
            // remove the node from the query builder
            Builder.Nodes.Remove(parent);
            RequiresIntrospection = parent.RequiresIntrospection;
            // make the node a child of this one
            SubNodes.Add(parent);
        }

        /// <inheritdoc/>
        public override void Visit()
        {
            // is this node autogenerated and does it have a parent?
            if (Parent is not null)
                WrapParent(Parent);
        }

        /// <inheritdoc/>
        public override void FinalizeQuery()
        {
            // if parent is defined, our select logic was generated in the
            // visit step, we can just return out.
            if (SubNodes.Count == 1)
            {
                var node = SubNodes.First();

                // set introspection details & finalize
                node.SchemaInfo = SchemaInfo;
                node.FinalizeQuery();

                var result = node.Build();

                var selectTarget = result.Query;

                if (string.IsNullOrEmpty(selectTarget))
                {
                    if(node.Context.SetAsGlobal && !string.IsNullOrEmpty(node.Context.GlobalName))
                    {
                        // wrap global name
                        selectTarget = node.Context.GlobalName;
                    }

                    throw new InvalidOperationException($"Cannot resolve parent node {Parent}'s query");
                }

                Query.Append($"select ({selectTarget})");

                // append the shape of the parents node operating type if we should include ours
                if (Context.IncludeShape)
                    Query.Append($" {GetShape(node.OperatingType)}");
                return;
            }
            else if(SubNodes.Count > 1)
            {
                throw new NotSupportedException("Got more than one child node for select statement (this is a bug)");
            }

            if(!Context.IncludeShape)
            {
                Query.Insert(0, $"select {Context.SelectName ?? OperatingType.GetEdgeDBTypeName()}");
                return;
            }    

            // if our shape is 'new {...}' or null then parse the shape
            if (Context.Shape?.Body is NewExpression or MemberInitExpression || Context.Shape is null)
            {
                var shape = GetShape();

                if (Context.IsFreeObject)
                    Query.Insert(0, $"select {shape}");
                else
                    Query.Insert(0, $"select {Context.SelectName ?? OperatingType.GetEdgeDBTypeName()} {shape}");
            }
            else
            {
                // else we can just translate the shape and append it.
                Query.Insert(0, $"select {ExpressionTranslator.Translate(Context.Shape, Builder.QueryVariables, Context, Builder.QueryGlobals)}");
            }
        }

        /// <summary>
        ///     Adds a filter to the select node.
        /// </summary>
        /// <param name="expression">The filter predicate to add.</param>
        public void Filter(LambdaExpression expression)
        {
            var parsedExpression = ExpressionTranslator.Translate(expression, Builder.QueryVariables, Context, Builder.QueryGlobals);
            Query.Append($" filter {parsedExpression}");
        }

        /// <summary>
        ///     Adds a ordery by statement to the select node.
        /// </summary>
        /// <param name="asc">
        ///     <see langword="true"/> if the ordered result should be ascending first.
        /// </param>
        /// <param name="selector">The lambda property selector on which to order by.</param>
        /// <param name="nullPlacement">The <see langword="null"/> placement for null values.</param>
        public void OrderBy(bool asc, LambdaExpression selector, OrderByNullPlacement? nullPlacement)
        {
            var parsedExpression = ExpressionTranslator.Translate(selector, Builder.QueryVariables, Context, Builder.QueryGlobals);
            var direction = asc ? "asc" : "desc";
            Query.Append($" order by {parsedExpression} {direction}{(nullPlacement.HasValue ? $" {nullPlacement.Value.ToString().ToLowerInvariant()}" : "")}");
        }

        /// <summary>
        ///     Adds a offest statement to the select node.
        /// </summary>
        /// <param name="offset">The number of elements to offset by.</param>
        internal void Offset(long offset)
        {
            Query.Append($" offset {offset}");
        }

        /// <summary>
        ///     Adds a offest statement to the select node.
        /// </summary>
        /// <param name="exp">The expression returing the number of elements to offset by.</param>
        internal void OffsetExpression(LambdaExpression exp)
        {
            Query.Append($" offset {exp}");
        }

        /// <summary>
        ///     Adds a limit statement to the select node.
        /// </summary>
        /// <param name="limit">The number of element to limit to.</param>
        internal void Limit(long limit)
        {
            Query.Append($" limit {limit}");
        }

        /// <summary>
        ///     Adds a limit statement to the select node.
        /// </summary>
        /// <param name="exp">The expression returing the number of elements to limit to.</param>
        internal void LimitExpression(LambdaExpression exp)
        {
            Query.Append($" limit {exp}");
        }
    }
}
