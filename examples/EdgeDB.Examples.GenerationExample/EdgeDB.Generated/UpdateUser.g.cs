// AUTOGENERATED: DO NOT MODIFY
// edgeql:29C7E416758A325CBF41C87D9076AA7CBCFC249DEC4BF4EE8FB090F3730C4D98
// Generated on 2022-12-06T21:23:52.6143226Z
#nullable enable
using EdgeDB;

namespace EdgeDB.Generated;

/// <summary>
///     A class representing the query file <c>examples\EdgeDB.Examples.GenerationExample\Scripts\UpdateUser.edgeql</c>, containing both the query string and methods to execute the query.
/// </summary>
public static class UpdateUser
{
    /// <summary>
    ///     A string containing the query defined in <c>examples\EdgeDB.Examples.GenerationExample\Scripts\UpdateUser.edgeql</c>
    /// </summary>
    public static readonly string Query =
@"WITH 
    new_name := <str>$name,
    new_email := <str>$email
UPDATE Person
FILTER .id = <uuid>$id
SET {
    name := new_name IF EXISTS new_name ELSE .name,
    email := new_email IF EXISTS new_email ELSE .email
}";

    /// <summary>
    ///     Executes the UpdateUser query, defined as:
    ///     <code>
    ///         WITH 
    ///             new_name := &lt;str&gt;$name,
    ///             new_email := &lt;str&gt;$email
    ///         UPDATE Person
    ///         FILTER .id = &lt;uuid&gt;$id
    ///         SET {
    ///             name := new_name IF EXISTS new_name ELSE .name,
    ///             email := new_email IF EXISTS new_email ELSE .email
    ///         }
    ///     </code>
    /// </summary>
    /// <param name="client">The client to execute the query on.</param>
    /// <param name="name">The name parameter of the query.</param>
    /// <param name="email">The email parameter of the query.</param>
    /// <param name="id">The id parameter of the query.</param>
    /// <param name="token">A cancellation token used to cancel the asyncronous query.</param>
    /// <returns>A Task representing the asynchronous query operation. The result of the task is the result of the query.</returns>
    public static Task<UpdateUserResult?> ExecuteAsync(IEdgeDBQueryable client, string? name, string? email, Guid id, CancellationToken token = default)
        => client.QuerySingleAsync<UpdateUserResult>(Query, new Dictionary<string, object?>() { { "name", name }, { "email", email }, { "id", id } }, capabilities: (Capabilities)1ul, token: token);

    /// <summary>
    ///     Executes the UpdateUser query, defined as:
    ///     <code>
    ///         WITH 
    ///             new_name := &lt;str&gt;$name,
    ///             new_email := &lt;str&gt;$email
    ///         UPDATE Person
    ///         FILTER .id = &lt;uuid&gt;$id
    ///         SET {
    ///             name := new_name IF EXISTS new_name ELSE .name,
    ///             email := new_email IF EXISTS new_email ELSE .email
    ///         }
    ///     </code>
    /// </summary>
    /// <param name="client">The client to execute the query on.</param>
    /// <param name="name">The name parameter of the query.</param>
    /// <param name="email">The email parameter of the query.</param>
    /// <param name="id">The id parameter of the query.</param>
    /// <param name="token">A cancellation token used to cancel the asyncronous query.</param>
    /// <returns>A Task representing the asynchronous query operation. The result of the task is the result of the query.</returns>
    public static Task<UpdateUserResult?> UpdateUserAsync(this IEdgeDBQueryable client, string? name, string? email, Guid id, CancellationToken token = default)
        => ExecuteAsync(client, name, email, id, token: token);
}
#nullable restore
